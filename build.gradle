buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.aliyun.com/repository/public' }
        maven { url = 'https://maven.aliyun.com/repository/central' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'       // Forge开发核心
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'    // Parchment映射支持
    id 'org.spongepowered.mixin' version '0.7.38'               // Mixin支持
    id 'me.modmuss50.mod-publish-plugin' version '0.4.5'        // 自动发布支持
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

base {
    // 设置输出的.jar文件主名
    archivesName = mod_id
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, "${mod_id}.refmap.json"
    config "create_freight.mixins.json"
}

java {
    // 指定使用Java 17编译
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    // Minecraft source mapping
    mappings channel: mapping_channel, version: mapping_version

    // Run Gradle's ProcessResources task(s) on IDE output locations before launching the game. REQUIRED
    copyIdeResources = true

    // Enable access transformers for use in development.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {

        client {
            workingDirectory project.file('run')
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
/*            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'create_freight'
            arg '-mixin.config=create_freight.mixins.json'

            mods {
                create_freight {
                    source sourceSets.main
                }
            }*/
        }

        server {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'create_freight'
            arg '-mixin.config=create_freight.mixins.json'

            mods {
                create_freight {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'create_freight'
            arg '-mixin.config=create_freight.mixins.json'

            mods {
                create_freight {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            arg '-mixin.config=create_freight.mixins.json'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'create_freight', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                create_freight {
                    source sourceSets.main
                }
            }
        }
    }
}


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // Create, Ponder, Flywheel
        url = "https://maven.createmod.net"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        // Conditional Mixin
        name = "ConditionalMixin"
        url 'https://maven.fallenbreath.me/releases'
    }
    maven {
        // Registrate
        url = "https://maven.ithundxr.dev/mirror"
    }
    maven {
        // ForgeConfigAPIPort
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }

    // Mod jar dependencies in ./libs
     flatDir {
         dir 'libs'
     }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation(fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false })
    implementation(fg.deobf("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}"))
    compileOnly(fg.deobf("dev.engine-room.flywheel:flywheel-forge-api-${minecraft_version}:${flywheel_version}"))
    runtimeOnly(fg.deobf("dev.engine-room.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}"))
    implementation(fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}"))
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation("io.github.llamalad7:mixinextras-forge:0.4.1")

     compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
     compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
     runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}


// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// How to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "MixinConfigs"            : "create_freight.mixins.json"])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
